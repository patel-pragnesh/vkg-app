#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
// var cluster = require('cluster');
var debug = require('debug')('vizkeszlet-gazdalkodas-app:server');
var http = require('http');
var configuration = require('../settings'); 
var sharedsession = require("express-socket.io-session");
var uniqid = require('uniqid');
const numCPUs = require('os').cpus().length;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || configuration.port);
app.set('port', port);

// if (cluster.isMaster) {
  // Fork workers.
  // for (var i = 0; i < numCPUs; i++) {
  //   cluster.fork();
  // }

  // // If a worker dies, log it to the console and start another worker.
  // cluster.on('exit', function(worker, code, signal) {
  //   console.log('Worker ' + worker.process.pid + ' died.');
  //   cluster.fork();
  // });

  // // Log when a worker starts listening
  // cluster.on('listening', function(worker, address) {
  //   console.log('Worker started with PID ' + worker.process.pid + '.');
  // });

// } else {

  

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Configure socket.
 */

var io = require('socket.io')(server);
io.use(sharedsession(app.session));
var clients = [];
io.on('connection', function(socket){ 
  //console.log('CLient connecting...');

  if(!clients[socket.handshake.session.session_uniqid]){
    clients[socket.handshake.session.session_uniqid] = [];
  }

  clients[socket.handshake.session.session_uniqid].push(socket.id);

  //console.log(clients);

  //console.log("session_uniqid (socket connection): "+socket.handshake.session.session_uniqid);

  //socket.emit('connected', { socketId: socket.handshake.session.session_uniqid });

  socket.on('disconnect', function() {
    //console.log('Client disconnecting...');
    var index = clients[socket.handshake.session.session_uniqid].indexOf(socket.id);
    if (index > -1) {
      clients[socket.handshake.session.session_uniqid].splice(index, 1);
    }
    //delete clients[socket.handshake.session.session_uniqid];
  });
});

app.set('socketio', io);
app.set('socket_clients', clients);

/**
 * Listen on provided port, on all network interfaces.
 */
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
// }

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
